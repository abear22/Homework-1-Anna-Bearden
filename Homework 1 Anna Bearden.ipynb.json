{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ee18c96f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#P1 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "40229a4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "87"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listie=[3,4,6,10,39,87,12,54]\n",
    "\n",
    "max(listie)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c38103e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min(listie)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e00fe988",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "75d1ba77",
   "metadata": {},
   "outputs": [],
   "source": [
    "listie.sort()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e596d75f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3, 4, 6, 10, 12, 39, 54, 87]\n"
     ]
    }
   ],
   "source": [
    "print(listie)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "11fa699f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#P2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1231ecde",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    }
   ],
   "source": [
    "listNO=[]\n",
    "listYES=[]\n",
    "\n",
    "def prime (num):\n",
    "    if num>1:\n",
    "        for j in range (2,num):\n",
    "            if (num%j)==0:\n",
    "                listNO.append(num)\n",
    "                break\n",
    "            else:\n",
    "                listYES.append(num)\n",
    "    else:\n",
    "        listNO.append(num)\n",
    "    return\n",
    "\n",
    "listPRIMES=[]\n",
    "[listPRIMES.append(x) for x in listYES if x not in listYES]\n",
    "print(listPRIMES)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ace134ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n"
     ]
    }
   ],
   "source": [
    "for j in range (1,100):\n",
    "    prime(j)\n",
    "\n",
    "    listPRIMES=[]\n",
    "\n",
    "[listPRIMES.append(x) for x in listYES if x not in listPRIMES]\n",
    "\n",
    "print(listPRIMES)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "11575f3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "listPRIMESS=[]\n",
    "listYESS=[]\n",
    "listNOO=[]\n",
    "\n",
    "def RANGE (num):\n",
    "    listPRIMESS=[]\n",
    "    listYESS=[]\n",
    "    \n",
    "    for j in range (1,100):\n",
    "        if (num%j)==0:\n",
    "            listNOO.append(num)\n",
    "            break\n",
    "        else:\n",
    "            listYESS.append(num)\n",
    "    return\n",
    "    listPRIMESS=[]\n",
    "    [listPRIMESS.append(x) for x in listYESS if x not in listPRIMESS]\n",
    "    \n",
    "    print(listPRIMESS)\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "970b6f93",
   "metadata": {},
   "outputs": [],
   "source": [
    "#P3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a6eb4c0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "95426639",
   "metadata": {},
   "outputs": [],
   "source": [
    "#P4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a68ae47",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import numpy as np\n",
    "\n",
    "#a = np.array([3,4,-5],[0,5,1],[1,3,6])\n",
    "#b = np.array([10,8,-5])\n",
    "#x = np.linalg.solve(a,b)\n",
    "\n",
    "#print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7626c229",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8e68e396",
   "metadata": {},
   "outputs": [],
   "source": [
    "#P5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1de565cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "x = np.linspace(-5,5,100)\n",
    "\n",
    "y = 0.1*x**3-x**2+5\n",
    "\n",
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(1,1,1)\n",
    "ax.spines['left'].set_position('center')\n",
    "ax.spines['bottom'].set_position('zero')\n",
    "ax.spines['right'].set_color('none')\n",
    "ax.xaxis.set_ticks_position('bottom')\n",
    "ax.yaxis.set_ticks_position('left')\n",
    "\n",
    "plt.plot(x,y,'r')\n",
    "\n",
    "plt.show()\n",
    "\n",
    "#this seems to run in my Spyder Launch for Anaconda but not in here. Cannot find typo here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ca1cb151",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e3cd0bd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
